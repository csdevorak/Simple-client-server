#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <string.h>

#define PORT 1234

double sheep_price =1.0;

void handle_client(int client_socket){
        char msg_type;
        double value;

        while(read(client_socket, &msg_type, sizeof(char))){
                if(msg_type==1){
                        read(client_socket, &value, sizeof(double));
                        sheep_price = value;
                        char response =4;
                        write(client_socket,&response, sizeof(char));
                }else if(msg_type==2){
                        read(client_socket,&value,sizeof(double));
                        value *= sheep_price;
                        char response = 5;
                        write(client_socket,&response,sizeof(char));
                        write(client_socket,&value,sizeof(double));
                }else if(msg_type ==3){
                        read(client_socket,&value,sizeof(double));
                        value /= sheep_price;
                        char response =5;
                        write(client_socket,&response,sizeof(char));
                        write(client_socket,&value,sizeof(double));
                }
        }
        close(client_socket);
}

int main(){
        int server_socket, client_socket;
        struct sockaddr_in server_addr, client_addr;
        socklen_t addr_len = sizeof(struct sockaddr_in);

        if((server_socket = socket(AF_INET, SOCK_STREAM, 0))==-1){
                perror("Error creating socket. Uh oh");
                exit(EXIT_FAILURE);
        }

        memset(&server_addr, 0, addr_len);
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(PORT);
        server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

        if(bind(server_socket,(struct sockaddr *)&server_addr, addr_len)==-1){
                perror("Error binding socket");
                exit(EXIT_FAILURE);
        }
        if(listen(server_socket,5)==-1){
                perror("Error listening for connections");
                exit(EXIT_FAILURE);
        }
        printf("Server listening... \n");

        while(1){
                if((client_socket = accept(server_socket,(struct sockaddr *)&client_addr,&addr_len))==-1){
                        perror("Error accepting connection");
                        continue;
                }
                printf("Connection from %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

                handle_client(client_socket);
        }
        close(server_socket);
        return 0;
}

